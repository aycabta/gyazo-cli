#!/usr/bin/env node

var exec = require('child_process').exec
  , optimist = require('optimist')
  , screencapture = require('../lib/screencapture')
  , tmp = require('tmp')
  , fs = require('fs')
  , Promise = require('es6-promise').Promise
  , clip = require('cliparoo')
  , gyazo = require('../lib/gyazo')

var argv = optimist
    .usage('Usage: $0')
    .describe('help', 'Print this')
    .describe('version', 'Show version')
    .describe('times', 'Screenshot N times and upload them all')
    .describe('quiet', 'Don\'t open an image in browser (Copy url only)')
    .describe('stdin', 'Read image from stdin')
    .describe('host', 'Specify a host url to which you upload')
    .describe('id', 'Specify a device id')
    .alias('h', 'help')
    .alias('v', 'version')
    .alias('t', 'times')
    .alias('q', 'quiet')
    .alias('i', 'stdin')
    .argv

if (argv.help) {
  console.log(optimist.help())
  process.exit(0)
}

if (argv.version) {
  console.log(require('../package.json').version)
  process.exit(0)
}

function openURLs(urls) {
  if (argv.quiet) return

  exec('open ' + urls.join(' '))
}

function gyazoAndFinalize(inputs) {
  var options = {
    host: argv.host,
    id: argv.id
  }

  return gyazo(inputs, options).then(function (urls) {
    clip(urls.join('\\\\n'), function () {
      openURLs(urls)

      process.exit(0)
    })
  })
}

if (argv.stdin) {
  // XXX:
  tmp.file(function (err, tmpPath) {
    var ws = fs.createWriteStream(tmpPath)
    process.stdin.pipe(ws)
    process.stdin.on('end', function () {
      gyazoAndFinalize(tmpPath)
    })
  })

  return
}

// upload from url or path
var inputs = argv._
if (inputs.length) {
  return gyazoAndFinalize(inputs)
}

// screencapture N times and upload
var times = argv.times || 1

function sequenceScreencapture(times) {
  return new Promise(function (resolve, reject) {
    var promise = Promise.resolve()
    var paths = []

    for (var i = 0; i < times; i++) {
      promise = promise
        .then(screencapture)
        .then(function (imagePath) {
          paths.push(imagePath)
        })
    }

    promise.then(function () {
      resolve(paths)
    }, reject)
  })
}

sequenceScreencapture(times).then(function (paths) {
  return gyazoAndFinalize(paths)
})
