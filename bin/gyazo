#!/usr/bin/env node

var optimist = require('optimist')
  , screencapture = require('../lib/screencapture')
  , tmp = require('tmp')
  , fs = require('fs')
  , Promise = require('es6-promise').Promise
  , clip = require('cliparoo')
  , upload = require('gyazo-upload')
  , config = require('../lib/config')
  , extend = require('extend')
  , open = require('open')

var argv = optimist
    .usage('Usage: $0')
    .describe('help', 'Print this')
    .describe('version', 'Show version')
    .describe('times', 'Screenshot N times and upload them all')
    .describe('quiet', 'Don\'t open an image in browser (Copy url only)')
    .describe('stdin', 'Read image from stdin')
    .describe('host', 'Specify a host url to which you upload')
    .describe('id', 'Specify a device id')
    .alias('h', 'help')
    .alias('v', 'version')
    .alias('t', 'times')
    .alias('q', 'quiet')
    .alias('i', 'stdin')
    .argv

if (argv.help) {
  console.log(optimist.help())
  process.exit(0)
}

if (argv.version) {
  console.log(require('../package.json').version)
  process.exit(0)
}

if (argv._[0] === 'config') {
  if (!argv._[1]) return config.read().then(console.log)

  var key = argv._[1]
    , value = argv._[2]

  if (value) {
    config.add(key, value)
  } else {
    config.readValue(key).then(console.log)
  }

  return
}

function openURLs(urls) {
  if (argv.quiet) return

  urls.forEach(function (url) {
    open(url)
  })
}

function readOptions() {
  return config.read().then(function (options) {
    var argvOptions = ['host', 'id'].reduce(function (options, key) {
      if (argv[key]) options[key] = argv[key]
      return options
    }, {})

    extend(options, argvOptions)

    return options
    console.log(options)
  })
}

function gyazoAndFinalize(inputs) {
  return readOptions().then(function (options) {
    upload(inputs, options).then(function (urls) {
      clip(urls.join('\\\\n'), function () {
        openURLs(urls)

        process.exit(0)
      })
    })
  })
}

if (argv.stdin) {
  // XXX:
  tmp.file(function (err, tmpPath) {
    var ws = fs.createWriteStream(tmpPath)
    process.stdin.pipe(ws)
    process.stdin.on('end', function () {
      gyazoAndFinalize(tmpPath)
    })
  })

  return
}

// upload from url or path
var inputs = argv._
if (inputs.length) {
  return gyazoAndFinalize(inputs)
}

// screencapture N times and upload
var times = argv.times || 1

function sequenceScreencapture(times) {
  return new Promise(function (resolve, reject) {
    var promise = Promise.resolve()
    var paths = []

    for (var i = 0; i < times; i++) {
      promise = promise
        .then(screencapture)
        .then(function (imagePath) {
          paths.push(imagePath)
        })
    }

    promise.then(function () {
      resolve(paths)
    }, reject)
  })
}

sequenceScreencapture(times).then(function (paths) {
  return gyazoAndFinalize(paths)
})
