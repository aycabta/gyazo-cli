#!/usr/bin/env node

var optimist = require('optimist')
  , gyazo = require('../lib/gyazo')
  , tmp = require('tmp')
  , fs = require('fs')
  , config = require('../lib/config')
  , extend = require('extend')
  , open = require('open')

var argv = optimist
    .usage('Usage: $0')
    .describe('help', 'Print this')
    .describe('version', 'Show version')
    .describe('times', 'Screenshot N times and upload them all')
    .describe('quiet', 'Don\'t open an image in browser (Copy url only)')
    .describe('stdin', 'Read image from stdin')
    .describe('host', 'Specify a host url to which you upload')
    .describe('id', 'Specify a device id')
    .alias('h', 'help')
    .alias('v', 'version')
    .alias('t', 'times')
    .alias('q', 'quiet')
    .alias('i', 'stdin')
    .argv

if (argv.help) {
  console.log(optimist.help())
  process.exit(0)
}

if (argv.version) {
  console.log(require('../package.json').version)
  process.exit(0)
}

if (argv._[0] === 'config') {
  if (!argv._[1]) return config.read().then(console.log)

  var key = argv._[1]
    , value = argv._[2]

  if (value) {
    config.add(key, value)
  } else {
    config.readValue(key).then(console.log)
  }

  return
}

var ARGV_OPTION_KEYS =  ['host', 'id', 'quiet']

function readOptions() {
  return config.read().then(function (options) {
    var argvOptions = ARGV_OPTION_KEYS.reduce(function (options, key) {
      if (argv[key]) options[key] = argv[key]
      return options
    }, {})

    extend(options, argvOptions)

    return options
  })
}

readOptions().then(function (options) {
  if (argv.stdin) {
    // XXX:
    tmp.file(function (err, tmpPath) {
      var ws = fs.createWriteStream(tmpPath)
      process.stdin.pipe(ws)
      process.stdin.on('end', function () {
        gyazo(tmpPath, options).then(process.exit)
      })
    })

    return
  }

  // upload from url or path
  var inputs = argv._
  if (inputs.length) {
    return gyazo(inputs, options).then(process.exit).catch(console.error)
  }

  options.times = argv.times
  gyazo(options).then(process.exit).catch(console.error)
})
